NDSummary.OnToolTipsLoaded("CSharpClass:LessCodeEngine.Gizmos.Modules.ExpressionEvaluator",{873:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype873\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">LessCodeEngine.&#8203;Gizmos.&#8203;Modules.</span>&#8203;ExpressionEvaluator</div></div></div><div class=\"TTSummary\">This class allow to evaluate a string math or pseudo C# expression</div></div>",875:"<div class=\"NDToolTip TConstant LCSharp\"><div id=\"NDPrototype875\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected const string</span> primaryTypesRegexPattern</div></div></div>",877:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype877\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> Regex varOrFunctionRegEx</div></div></div>",879:"<div class=\"NDToolTip TConstant LCSharp\"><div id=\"NDPrototype879\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected const string</span> numberRegexOrigPattern</div></div></div>",881:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype881\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected string</span> numberRegexPattern</div></div></div>",882:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype882\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> Regex otherBasesNumberRegex</div></div></div>",883:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype883\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> Regex stringBeginningRegex</div></div></div>",884:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype884\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> Regex internalCharRegex</div></div></div>",885:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype885\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> Regex indexingBeginningRegex</div></div></div>",886:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype886\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> Regex assignationOrPostFixOperatorRegex</div></div></div>",887:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype887\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> Regex genericsDecodeRegex</div></div></div>",888:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype888\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> Regex genericsEndOnlyOneTrim</div></div></div>",889:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype889\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> Regex endOfStringWithDollar</div></div></div>",890:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype890\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> Regex endOfStringWithoutDollar</div></div></div>",891:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype891\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> Regex endOfStringWithDollarWithAt</div></div></div>",892:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype892\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> Regex endOfStringWithoutDollarWithAt</div></div></div>",893:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype893\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> Regex endOfStringInterpolationRegex</div></div></div>",894:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype894\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> Regex stringBeginningForEndBlockRegex</div></div></div>",895:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype895\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> Regex lambdaExpressionRegex</div></div></div>",896:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype896\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> Regex lambdaArgRegex</div></div></div>",897:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype897\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> Regex initInNewBeginningRegex</div></div></div>",899:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype899\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected string</span> InstanceCreationWithNewKeywordRegexPattern { <span class=\"SHKeyword\">get</span> }</div></div></div>",900:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype900\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected string</span> CastRegexPattern { <span class=\"SHKeyword\">get</span> }</div></div></div>",902:"<div class=\"NDToolTip TConstant LCSharp\"><div id=\"NDPrototype902\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected const string</span> blockComments</div></div></div>",903:"<div class=\"NDToolTip TConstant LCSharp\"><div id=\"NDPrototype903\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected const string</span> lineComments</div></div></div>",904:"<div class=\"NDToolTip TConstant LCSharp\"><div id=\"NDPrototype904\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected const string</span> stringsIgnore</div></div></div>",905:"<div class=\"NDToolTip TConstant LCSharp\"><div id=\"NDPrototype905\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected const string</span> verbatimStringsIgnore</div></div></div>",907:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype907\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> Regex removeCommentsRegex</div></div></div>",908:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype908\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> Regex newLineCharsRegex</div></div></div>",909:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype909\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> Regex blockKeywordsBeginningRegex</div></div></div>",910:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype910\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> Regex foreachParenthisEvaluationRegex</div></div></div>",911:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype911\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> Regex blockKeywordsWithoutParenthesesBeginningRegex</div></div></div>",912:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype912\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> Regex blockBeginningRegex</div></div></div>",913:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype913\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> Regex returnKeywordRegex</div></div></div>",914:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype914\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> Regex nextIsEndOfExpressionRegex</div></div></div>",916:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype916\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected enum</span> IfBlockEvaluatedState</div></div></div>",917:"<div class=\"NDToolTip TEnumeration LCSharp\"><div id=\"NDPrototype917\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected enum</span> TryBlockEvaluatedState</div></div></div>",919:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype919\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> IDictionary&lt;<span class=\"SHKeyword\">string</span>, Type&gt; primaryTypesDict</div></div></div>",920:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype920\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> IDictionary&lt;<span class=\"SHKeyword\">string</span>, Func&lt;<span class=\"SHKeyword\">string</span>, CultureInfo, <span class=\"SHKeyword\">object</span>&gt;&gt; numberSuffixToParse</div></div></div>",921:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype921\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> IDictionary&lt;<span class=\"SHKeyword\">char</span>, <span class=\"SHKeyword\">string</span>&gt; stringEscapedCharDict</div></div></div>",922:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype922\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> IDictionary&lt;<span class=\"SHKeyword\">char</span>, <span class=\"SHKeyword\">char</span>&gt; charEscapedCharDict</div></div></div>",923:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype923\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected</span> IDictionary&lt;<span class=\"SHKeyword\">string</span>, ExpressionOperator&gt; operatorsDictionary</div></div><div class=\"TTSummary\">OperatorsDictionaryInit() for values</div></div>",924:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype924\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> IList&lt;ExpressionOperator&gt; leftOperandOnlyOperatorsEvaluationDictionary</div></div></div>",925:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype925\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> IList&lt;ExpressionOperator&gt; rightOperandOnlyOperatorsEvaluationDictionary</div></div></div>",927:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype927\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected virtual</span> IList&lt;ExpressionOperator&gt; LeftOperandOnlyOperatorsEvaluationDictionary { <span class=\"SHKeyword\">get</span> }</div></div></div>",928:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype928\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected virtual</span> IList&lt;ExpressionOperator&gt; RightOperandOnlyOperatorsEvaluationDictionary { <span class=\"SHKeyword\">get</span> }</div></div></div>",929:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype929\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected virtual</span> IList&lt;IDictionary&lt;ExpressionOperator, Func&lt;<span class=\"SHKeyword\">dynamic</span>, <span class=\"SHKeyword\">dynamic</span>, <span class=\"SHKeyword\">object</span>&gt;&gt;&gt; OperatorsEvaluations { <span class=\"SHKeyword\">get</span> }</div></div></div>",931:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype931\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected static object</span> IndexingOperatorFunc(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">dynamic</span>&nbsp;</td><td class=\"PName last\">left,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">dynamic</span>&nbsp;</td><td class=\"PName last\">right</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",933:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype933\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected static readonly</span> IList&lt;IDictionary&lt;ExpressionOperator, Func&lt;<span class=\"SHKeyword\">dynamic</span>, <span class=\"SHKeyword\">dynamic</span>, <span class=\"SHKeyword\">object</span>&gt;&gt;&gt; operatorsEvaluations</div></div></div>",934:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype934\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected</span> IDictionary&lt;<span class=\"SHKeyword\">string</span>, <span class=\"SHKeyword\">object</span>&gt; defaultVariables</div></div></div>",935:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype935\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected</span> IDictionary&lt;<span class=\"SHKeyword\">string</span>, Func&lt;<span class=\"SHKeyword\">double</span>, <span class=\"SHKeyword\">double</span>&gt;&gt; simpleDoubleMathFuncsDictionary</div></div></div>",936:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype936\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected</span> IDictionary&lt;<span class=\"SHKeyword\">string</span>, Func&lt;<span class=\"SHKeyword\">double</span>, <span class=\"SHKeyword\">double</span>, <span class=\"SHKeyword\">double</span>&gt;&gt; doubleDoubleMathFuncsDictionary</div></div></div>",937:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype937\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected</span> IDictionary&lt;<span class=\"SHKeyword\">string</span>, Func&lt;ExpressionEvaluator, List&lt;<span class=\"SHKeyword\">string</span>&gt;, <span class=\"SHKeyword\">object</span>&gt;&gt; complexStandardFuncsDictionary</div></div></div>",939:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype939\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public bool</span> CacheTypesResolutions { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">if set to true use a cache for types that were resolved to resolve faster next time.&nbsp; if set to false the cache of types resolution is not use for this instance of ExpressionEvaluator.&nbsp; Default : false the cache is the static Dictionary TypesResolutionCaching (so it is shared by all instances of ExpressionEvaluator that have CacheTypesResolutions enabled)</div></div>",940:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype940\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public static</span> IDictionary&lt;<span class=\"SHKeyword\">string</span>, Type&gt; TypesResolutionCaching { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">A shared cache for types resolution.</div></div>",942:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype942\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public static void</span> ClearAllCaches()</div></div><div class=\"TTSummary\">Clear all ExpressionEvaluator caches</div></div>",944:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype944\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">private static</span> IList&lt;Assembly&gt; staticAssemblies</div></div></div>",945:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype945\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">private</span> IList&lt;Assembly&gt; assemblies</div></div></div>",947:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype947\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public virtual</span> IList&lt;Assembly&gt; Assemblies { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">All assemblies needed to resolves Types by default all Assemblies loaded in the current AppDomain</div></div>",948:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype948\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public virtual</span> IList&lt;<span class=\"SHKeyword\">string</span>&gt; Namespaces { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">All Namespaces Where to find types</div></div>",949:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype949\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public virtual</span> IList&lt;Type&gt; Types { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">To add or remove specific types to manage in expression.</div></div>",950:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype950\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public virtual</span> IList&lt;Type&gt; TypesToBlock { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">A list of type to block an keep un usable in Expression Evaluation for security purpose</div></div>",951:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype951\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public virtual</span> IList&lt;Type&gt; StaticTypesForExtensionsMethods { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">A list of statics types where to find extensions methods</div></div>",953:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype953\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">private bool</span> optionCaseSensitiveEvaluationActive</div></div></div>",955:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype955\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public bool</span> OptionCaseSensitiveEvaluationActive { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">If true all evaluation are case sensitives.&nbsp; If false evaluations are case insensitive.&nbsp; By default = true</div></div>",956:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype956\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">private</span> StringComparison StringComparisonForCasing { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div></div>",957:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype957\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected</span> StringComparer StringComparerForCasing { <span class=\"SHKeyword\">get</span> }</div></div></div>",958:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype958\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public bool</span> OptionForceIntegerNumbersEvaluationsAsDoubleByDefault { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">If true all numbers without decimal and suffixes evaluations will be done as double If false Integers values without decimal and suffixes will be evaluate as int as in C# (Warning some operation can round values) By default = false</div></div>",960:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype960\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">private</span> CultureInfo cultureInfoForNumberParsing</div></div></div>",962:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype962\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public</span> CultureInfo CultureInfoForNumberParsing { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">The culture used to evaluate numbers Synchronized with OptionNumberParsingDecimalSeparator and OptionNumberParsingThousandSeparator.&nbsp; So always set a full CultureInfo object and do not change CultureInfoForNumberParsing.NumberFormat.NumberDecimalSeparator and CultureInfoForNumberParsing.NumberFormat.NumberGroupSeparator properties directly.&nbsp; Warning if using comma in separators change also OptionFunctionArgumentsSeparator and OptionInitializersSeparator otherwise it will create conflicts</div></div>",964:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype964\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">private string</span> optionNumberParsingDecimalSeparator</div></div></div>",966:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype966\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public string</span> OptionNumberParsingDecimalSeparator { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">Allow to change the decimal separator of numbers when parsing expressions.&nbsp; By default &quot;.&quot; Warning if using comma change also OptionFunctionArgumentsSeparator and OptionInitializersSeparator otherwise it will create conflicts.&nbsp; Modify CultureInfoForNumberParsing.</div></div>",968:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype968\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">private string</span> optionNumberParsingThousandSeparator</div></div></div>",970:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype970\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public string</span> OptionNumberParsingThousandSeparator { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">Allow to change the thousand separator of numbers when parsing expressions.&nbsp; By default string.Empty Warning if using comma change also OptionFunctionArgumentsSeparator and OptionInitializersSeparator otherwise it will create conflicts.&nbsp; Modify CultureInfoForNumberParsing.</div></div>",971:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype971\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public string</span> OptionFunctionArgumentsSeparator { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">Allow to change the separator of functions arguments.&nbsp; By default &quot;,&quot; Warning must to be changed if OptionNumberParsingDecimalSeparator = &quot;,&quot; otherwise it will create conflicts</div></div>",972:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype972\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public string</span> OptionInitializersSeparator { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">Allow to change the separator of Object and collections Initialization between { and } after the keyword new.&nbsp; By default &quot;,&quot; Warning must to be changed if OptionNumberParsingDecimalSeparator = &quot;,&quot; otherwise it will create conflicts</div></div>",973:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype973\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public bool</span> OptionFluidPrefixingActive { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">if true allow to add the prefix Fluid or Fluent before void methods names to return back the instance on which the method is call.&nbsp; if false unactive this functionality.&nbsp; By default : true</div></div>",974:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype974\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public bool</span> OptionInlineNamespacesEvaluationActive { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">if true allow the use of inline namespace (Can be slow, and is less secure).&nbsp; if false unactive inline namespace (only namespaces in Namespaces list are available).&nbsp; By default : true</div></div>",976:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype976\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">private</span> Func&lt;ExpressionEvaluator, List&lt;<span class=\"SHKeyword\">string</span>&gt;, <span class=\"SHKeyword\">object</span>&gt; newMethodMem</div></div></div>",978:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype978\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public bool</span> OptionNewFunctionEvaluationActive { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">if true allow to create instance of object with the Default function new(ClassNam,...).&nbsp; if false unactive this functionality.&nbsp; By default : true</div></div>",979:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype979\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public bool</span> OptionNewKeywordEvaluationActive { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">if true allow to create instance of object with the C# syntax new ClassName(...).&nbsp; if false unactive this functionality.&nbsp; By default : true</div></div>",980:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype980\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public bool</span> OptionStaticMethodsCallActive { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">if true allow to call static methods on classes.&nbsp; if false unactive this functionality.&nbsp; By default : true</div></div>",981:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype981\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public bool</span> OptionStaticPropertiesGetActive { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">if true allow to get static properties on classes if false unactive this functionality.&nbsp; By default : true</div></div>",982:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype982\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public bool</span> OptionInstanceMethodsCallActive { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">if true allow to call instance methods on objects.&nbsp; if false unactive this functionality.&nbsp; By default : true</div></div>",983:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype983\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public bool</span> OptionInstancePropertiesGetActive { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">if true allow to get instance properties on objects if false unactive this functionality.&nbsp; By default : true</div></div>",984:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype984\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public bool</span> OptionIndexingActive { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">if true allow to get object at index or key like IndexedObject[indexOrKey] if false unactive this functionality.&nbsp; By default : true</div></div>",985:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype985\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public bool</span> OptionStringEvaluationActive { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">if true allow string interpretation with &quot;&quot; if false unactive this functionality.&nbsp; By default : true</div></div>",986:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype986\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public bool</span> OptionCharEvaluationActive { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">if true allow char interpretation with \'\' if false unactive this functionality.&nbsp; By default : true</div></div>",987:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype987\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public bool</span> OptionEvaluateFunctionActive { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">If true Evaluate function is callables in an expression. If false Evaluate is not callable.&nbsp; By default : true if set to false for security (also ensure that ExpressionEvaluator type is in TypesToBlock list)</div></div>",988:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype988\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public bool</span> OptionVariableAssignationActive { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">If true allow to assign a value to a variable in the Variable disctionary with (=, +=, -=, *=, /=, %=, &amp;=, |=, ^=, &lt;&lt;=, &gt;&gt;=, ++ or --) If false unactive this functionality By default : true</div></div>",989:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype989\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public bool</span> OptionPropertyOrFieldSetActive { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">If true allow to set/modify a property or a field value with (=, +=, -=, *=, /=, %=, &amp;=, |=, ^=, &lt;&lt;=, &gt;&gt;=, ++ or --) If false unactive this functionality By default : true</div></div>",990:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype990\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public bool</span> OptionIndexingAssignationActive { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">If true allow to assign a indexed element like Collections, List, Arrays and Dictionaries with (=, +=, -=, *=, /=, %=, &amp;=, |=, ^=, &lt;&lt;=, &gt;&gt;=, ++ or --) If false unactive this functionality By default : true</div></div>",991:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype991\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public bool</span> OptionScriptEvaluateFunctionActive { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">If true ScriptEvaluate function is callables in an expression. If false Evaluate is not callable.&nbsp; By default : true if set to false for security (also ensure that ExpressionEvaluator type is in TypesToBlock list)</div></div>",992:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype992\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public</span> OptionOnNoReturnKeywordFoundInScriptAction OptionOnNoReturnKeywordFoundInScriptAction { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">If ReturnAutomaticallyLastEvaluatedExpression ScriptEvaluate return automatically the last evaluated expression if no return keyword is met.&nbsp; If ReturnNull return null if no return keyword is met.&nbsp; If ThrowSyntaxException a exception is throw if no return keyword is met.&nbsp; By default : ReturnAutomaticallyLastEvaluatedExpression;</div></div>",993:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype993\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public bool</span> OptionScriptNeedSemicolonAtTheEndOfLastExpression { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">If true ScriptEvaluate need to have a semicolon [;] after each expression.&nbsp; If false Allow to omit the semicolon for the last expression of the script.&nbsp; Default : true</div></div>",994:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype994\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public bool</span> OptionAllowNonPublicMembersAccess { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">If true Allow to access fields, properties and methods that are not declared public. (private, protected and internal) If false Allow to access only to public members.&nbsp; Default : false Warning : This clearly break the encapsulation principle use this only if you know what you do.</div></div>",995:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype995\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected virtual</span> BindingFlags InstanceBindingFlag { <span class=\"SHKeyword\">get</span> }</div></div></div>",996:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype996\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected virtual</span> BindingFlags StaticBindingFlag { <span class=\"SHKeyword\">get</span> }</div></div></div>",997:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype997\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public object</span> Context { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">If set, this object is used to use it\'s fields, properties and methods as global variables and functions</div></div>",999:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype999\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">private</span> IDictionary&lt;<span class=\"SHKeyword\">string</span>, <span class=\"SHKeyword\">object</span>&gt; variables</div></div></div>",1000:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype1000\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">private int</span> evaluationStackCount</div></div><div class=\"TTSummary\">Counts stack initialisations to determine if the expression enty point was reached. In that case the transported exception should be thrown.</div></div>",1002:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype1002\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public</span> IDictionary&lt;<span class=\"SHKeyword\">string</span>, <span class=\"SHKeyword\">object</span>&gt; Variables { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">The Values of the variable use in the expressions</div></div>",1004:"<div class=\"NDToolTip TEvent LCSharp\"><div id=\"NDPrototype1004\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public event</span> EventHandler&lt;VariablePreEvaluationEventArg&gt; PreEvaluateVariable</div></div><div class=\"TTSummary\">Is Fired before a variable, field or property resolution.&nbsp; Allow to define a variable and the corresponding value on the fly.&nbsp; Allow also to cancel the evaluation of this variable (consider it does\'nt exists)</div></div>",1005:"<div class=\"NDToolTip TEvent LCSharp\"><div id=\"NDPrototype1005\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public event</span> EventHandler&lt;FunctionPreEvaluationEventArg&gt; PreEvaluateFunction</div></div><div class=\"TTSummary\">Is Fired before a function or method resolution.&nbsp; Allow to define a function or method and the corresponding value on the fly.&nbsp; Allow also to cancel the evaluation of this function (consider it does\'nt exists)</div></div>",1006:"<div class=\"NDToolTip TEvent LCSharp\"><div id=\"NDPrototype1006\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public event</span> EventHandler&lt;VariableEvaluationEventArg&gt; EvaluateVariable</div></div><div class=\"TTSummary\">Is Fired if no variable, field or property were found Allow to define a variable and the corresponding value on the fly.</div></div>",1007:"<div class=\"NDToolTip TEvent LCSharp\"><div id=\"NDPrototype1007\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public event</span> EventHandler&lt;FunctionEvaluationEventArg&gt; EvaluateFunction</div></div><div class=\"TTSummary\">Is Fired if no function or method when were found.&nbsp; Allow to define a function or method and the corresponding value on the fly.</div></div>",1009:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1009\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public</span> ExpressionEvaluator()</div></div><div class=\"TTSummary\">Default Constructor</div></div>",1010:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1010\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> ExpressionEvaluator(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">IDictionary&lt;<span class=\"SHKeyword\">string</span>, <span class=\"SHKeyword\">object</span>&gt;&nbsp;</td><td class=\"PName last\">variables</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Constructor with variables initialize</div></div>",1011:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1011\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> ExpressionEvaluator(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">context</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Constructor with context initialize</div></div>",1012:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1012\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> ExpressionEvaluator(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">context,</td></tr><tr><td class=\"PType first\">IDictionary&lt;<span class=\"SHKeyword\">string</span>, <span class=\"SHKeyword\">object</span>&gt;&nbsp;</td><td class=\"PName last\">variables</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Constructor with variables and context initialize</div></div>",1013:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1013\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected virtual void</span> DefaultDecimalSeparatorInit()</div></div></div>",1014:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1014\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected virtual void</span> Init()</div></div></div>",1016:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype1016\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected bool</span> inScript</div></div></div>",1018:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1018\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public virtual</span> T ScriptEvaluate&lt;T&gt;(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">script</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Evaluate a script (multiple expressions separated by semicolon) Support Assignation with [=] (for simple variable write in the Variables dictionary) support also if, else if, else while and for keywords</div></div>",1019:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1019\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public virtual object</span> ScriptEvaluate(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">script</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Evaluate a script (multiple expressions separated by semicolon) Support Assignation with [=] (for simple variable write in the Variables dictionary) support also if, else if, else while and for keywords</div></div>",1020:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1020\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual object</span> ScriptEvaluate(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">script,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">valueReturned,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">breakCalled,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">continueCalled</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1021:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1021\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public</span> T Evaluate&lt;T&gt;(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">expression</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Evaluate the specified math or pseudo C# expression</div></div>",1023:"<div class=\"NDToolTip TVariable LCSharp\"><div id=\"NDPrototype1023\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">private</span> IList&lt;ParsingMethodDelegate&gt; parsingMethods</div></div></div>",1025:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype1025\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">protected virtual</span> IList&lt;ParsingMethodDelegate&gt; ParsingMethods { <span class=\"SHKeyword\">get</span> }</div></div></div>",1027:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1027\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public object</span> Evaluate(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">expression</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Evaluate the specified math or pseudo C# expression</div></div>",1028:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1028\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual bool</span> EvaluateCast(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">expression,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">Stack&lt;<span class=\"SHKeyword\">object</span>&gt;&nbsp;</td><td class=\"PName last\">stack,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">i</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1029:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1029\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual bool</span> EvaluateNumber(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">expression,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">Stack&lt;<span class=\"SHKeyword\">object</span>&gt;&nbsp;</td><td class=\"PName last\">stack,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">i</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1030:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1030\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual bool</span> EvaluateInstanceCreationWithNewKeyword(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">expression,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">Stack&lt;<span class=\"SHKeyword\">object</span>&gt;&nbsp;</td><td class=\"PName last\">stack,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">i</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1031:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1031\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual bool</span> EvaluateVarOrFunc(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">expression,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">Stack&lt;<span class=\"SHKeyword\">object</span>&gt;&nbsp;</td><td class=\"PName last\">stack,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">i</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1032:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1032\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual bool</span> EvaluateChar(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">expression,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">Stack&lt;<span class=\"SHKeyword\">object</span>&gt;&nbsp;</td><td class=\"PName last\">stack,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">i</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1033:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1033\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual bool</span> EvaluateOperators(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">expression,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">Stack&lt;<span class=\"SHKeyword\">object</span>&gt;&nbsp;</td><td class=\"PName last\">stack,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">i</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1034:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1034\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual bool</span> EvaluateTernaryConditionalOperator(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">expression,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">Stack&lt;<span class=\"SHKeyword\">object</span>&gt;&nbsp;</td><td class=\"PName last\">stack,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">i</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1035:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1035\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual bool</span> EvaluateParenthis(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">expression,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">Stack&lt;<span class=\"SHKeyword\">object</span>&gt;&nbsp;</td><td class=\"PName last\">stack,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">i</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1036:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1036\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual void</span> CorrectStackWithUnaryPlusOrMinusBeforeParenthisIfNecessary(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Stack&lt;<span class=\"SHKeyword\">object</span>&gt;&nbsp;</td><td class=\"PName last\">stack</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1037:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1037\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual bool</span> EvaluateIndexing(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">expression,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">Stack&lt;<span class=\"SHKeyword\">object</span>&gt;&nbsp;</td><td class=\"PName last\">stack,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">i</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1038:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1038\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual bool</span> EvaluateString(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">expression,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">Stack&lt;<span class=\"SHKeyword\">object</span>&gt;&nbsp;</td><td class=\"PName last\">stack,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">i</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1039:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1039\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual object</span> ProcessStack(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Stack&lt;<span class=\"SHKeyword\">object</span>&gt;&nbsp;</td><td class=\"PName last\">stack</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1040:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1040\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public string</span> RemoveComments(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">scriptWithComments</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">remove all line and blocks comments of the specified C# script. (Manage in strings comment syntax ignore) based on https://&#8203;stackoverflow&#8203;.com&#8203;/questions&#8203;/3524317&#8203;/regex-to-strip-line-comments-from-c&#8203;-sharp&#8203;/3524689&#8203;#3524689</div></div>",1042:"<div class=\"NDToolTip TDelegate LCSharp\"><div id=\"NDPrototype1042\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected delegate bool</span> ParsingMethodDelegate(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">expression,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">Stack&lt;<span class=\"SHKeyword\">object</span>&gt;&nbsp;</td><td class=\"PName last\">stack,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">i</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1043:"<div class=\"NDToolTip TDelegate LCSharp\"><div id=\"NDPrototype1043\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected delegate dynamic</span> InternalDelegate(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">params</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">dynamic</span>[]&nbsp;</td><td class=\"PName last\">args</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1045:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1045\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual bool</span> GetLambdaExpression(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">expression,</td></tr><tr><td class=\"PType first\">Stack&lt;<span class=\"SHKeyword\">object</span>&gt;&nbsp;</td><td class=\"PName last\">stack</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1046:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1046\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual</span> MethodInfo GetRealMethod(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">Type&nbsp;</td><td class=\"PName last\">type,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">obj,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">func,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">BindingFlags&nbsp;</td><td class=\"PName last\">flag,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">List&lt;<span class=\"SHKeyword\">object</span>&gt;&nbsp;</td><td class=\"PName last\">args,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">genericsTypes,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">Type[]&nbsp;</td><td class=\"PName last\">inferedGenericsTypes</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1047:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1047\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual</span> MethodInfo TryToCastMethodParametersToMakeItCallable(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">MethodInfo&nbsp;</td><td class=\"PName last\">methodInfoToCast,</td></tr><tr><td class=\"PType first\">List&lt;<span class=\"SHKeyword\">object</span>&gt;&nbsp;</td><td class=\"PName last\">modifiedArgs,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">genericsTypes,</td></tr><tr><td class=\"PType first\">Type[]&nbsp;</td><td class=\"PName last\">inferedGenericsTypes</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1048:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1048\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual</span> MethodInfo MakeConcreteMethodIfGeneric(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">MethodInfo&nbsp;</td><td class=\"PName last\">methodInfo,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">genericsTypes,</td></tr><tr><td class=\"PType first\">Type[]&nbsp;</td><td class=\"PName last\">inferedGenericsTypes</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1049:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1049\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual</span> Type[] GetConcreteTypes(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">genericsTypes</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1050:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1050\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual</span> BindingFlags DetermineInstanceOrStatic(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">Type&nbsp;</td><td class=\"PName last\">objType,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">obj,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">ValueTypeNestingTrace&nbsp;</td><td class=\"PName last\">valueTypeNestingTrace</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1051:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1051\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual string</span> GetScriptBetweenCurlyBrackets(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">parentScript,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName last\">index</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1052:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1052\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual</span> List&lt;<span class=\"SHKeyword\">string</span>&gt; GetExpressionsBetweenParenthesesOrOtherImbricableBrackets(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName\">expression,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">int</span>&nbsp;</td><td class=\"PName\">i,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName\">checkSeparator,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName\">separator</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\"> <span class=\"SHString\">&quot;,&quot;</span>,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName\">startChar</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\"> <span class=\"SHString\">&quot;(&quot;</span>,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName\">endChar</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\"> <span class=\"SHString\">&quot;)&quot;</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1053:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1053\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual bool</span> DefaultFunctions(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">name,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">List&lt;<span class=\"SHKeyword\">string</span>&gt;&nbsp;</td><td class=\"PName last\">args,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">out</span>&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">result</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1054:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1054\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual</span> Type GetTypeByFriendlyName(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName\">typeName,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName\">genericTypes</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\"> <span class=\"SHString\">&quot;&quot;</span>,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName\">throwExceptionIfNotFound</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\"> <span class=\"SHKeyword\">false</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1055:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1055\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected static object</span> ChangeType(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">value,</td></tr><tr><td class=\"PType first\">Type&nbsp;</td><td class=\"PName last\">conversionType</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1056:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1056\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual string</span> GetCodeUntilEndOfString(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">subExpr,</td></tr><tr><td class=\"PType first\">Match&nbsp;</td><td class=\"PName last\">stringBeginningMatch</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1057:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1057\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual void</span> GetCodeUntilEndOfString(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">subExpr,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">Match&nbsp;</td><td class=\"PName last\">stringBeginningMatch,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">StringBuilder&nbsp;</td><td class=\"PName last\">stringBuilder</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",1058:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype1058\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">protected virtual string</span> GetCodeUntilEndOfStringInterpolation(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">subExpr</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>"});